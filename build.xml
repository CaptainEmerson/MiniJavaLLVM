<project name="MJC">
  <property name="junit.jar" value="/usr/share/java/junit4.jar" />
  <property name="bridj.jar" value="build/libs/bridj-0.6.2.jar" />
  <property name="llvm-j.jar" value="build/libs/llvm-j.jar" />
  <property name="asm.jar" value="build/libs/asm-3.0.jar" />
  <property name="commons.jar.system" value="/usr/share/java/commons-cli-1.2.jar" />
  <property name="commons.jar" value="build/libs/commons-cli-1.2.jar" />
  <property name="sprintabout.jar" value="build/libs/sprintabout.jar" />
  <property name="dir.build" value="build/" />
  <property name="dir.libs" value="build/libs" />
  <property name="dir.classes" value="build/classes" />
  <property name="dir.runtime" value="build/runtime" />
  <property name="llvm.lib" value="llvm/Debug+Asserts/lib/libLLVM-3.5svn.so" />
  <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>  
  <path id="llvm-j.build.classpath">
    <pathelement location="${junit.jar}" />
    <pathelement location="${bridj.jar}"/>
  </path>
  <path id="llvm-j.run.classpath">
    <pathelement location="${junit.jar}" />
    <pathelement location="${bridj.jar}"/>
    <pathelement location="${llvm-j.jar}"/>
  </path>
  <path id="project.classpath">
    <pathelement location="${bridj.jar}"/>
    <pathelement location="${llvm-j.jar}"/>
    <pathelement location="${asm.jar}"/>
    <pathelement location="${sprintabout.jar}"/>
    <pathelement location="${commons.jar}"/>
  </path>
  <target name="git_setup">
    <exec executable="git">
      <arg value="config" />
      <arg value="filter.java_code.clean" />
      <arg value="astyle --options=${basedir}/.javastyle &lt; %f" />
    </exec>
    <exec executable="git">
      <arg value="config" />
      <arg value="filter.c_code.clean" />
      <arg value="astyle --options=${basedir}/.cstyle &lt; %f" />
    </exec>
  </target>
  <target name="ubuntu_depends">
    <exec executable="sudo">
      <arg value="apt-get" />
      <arg value="-y" />
      <arg value="install" />
      <arg value="libjna-java" />
      <arg value="llvm-3.5-dev" />
      <arg value="clang-3.5" />
      <arg value="gcc-4.7-multilib" />
      <arg value="g++-4.7-multilib" />
      <arg value="junit4" />
      <arg value="ant-contrib" />
      <arg value="libcommons-cli-java" />
    </exec>
  </target>
  <target name="clean">
    <delete dir="build"/>
  </target>
  <target name="fullclean" depends="clean">
    <exec executable="git" dir="llvm/" failonerror="true">
      <arg value="reset" />
      <arg value="--hard" />
    </exec>
    <exec executable="git" dir="llvm/" failonerror="true">
      <arg value="clean" />
      <arg value="-f" />
      <arg value="-d" />
    </exec>
  </target>
  <target name="runtime">
    <mkdir dir="${dir.runtime}"/>
    <outofdate>
      <sourcefiles>
        <pathelement path="src/runtime_llvm.c"/>
      </sourcefiles>
      <targetfiles>
        <pathelement path="${dir.runtime}/runtime_llvm.bc"/>
      </targetfiles>
      <sequential>
        <exec executable="clang" failonerror="true">
          <arg value="src/runtime_llvm.c" />
          <arg value="-c" />
          <arg value="-g" />
          <arg value="-o" />
          <arg value="${dir.runtime}/runtime_llvm.o"/>
        </exec>
      </sequential>
    </outofdate>
  </target>
  <target name="build_libs">
    <mkdir dir="${dir.libs}" />
    <if>
      <available file="llvm/Makefile.llvmbuild" />
      <else>
        <exec executable="./configure" dir="llvm/" failonerror="true">
          <arg value="--enable-assertions" />
          <arg value="--enable-debug-symbols" />
          <arg value="--disable-optimized" />
          <arg value="--enable-shared" />
        </exec>
      </else>
    </if>
    <if>
      <available file="${llvm.lib}" />
      <else>
        <exec executable="git">
          <arg value="submodule" />
          <arg value="update" />
        </exec>
        <exec executable="make" dir="llvm/" failonerror="true">
          <arg value="-j" />
          <arg value="4" />
        </exec>
      </else>
    </if>
    <if>
      <available file="${bridj.jar}"/>
      <else>
        <exec executable="wget" dir="${dir.libs}" failonerror="true">
          <arg value="https://bridj.googlecode.com/files/bridj-0.6.2.jar" />
        </exec>
      </else>
    </if>
    <if>
      <available file="${commons.jar}"/>
      <else>
        <copy todir="${dir.libs}">
          <file file="${commons.jar.system}" />
        </copy>
      </else>
    </if>
    <if>
      <available file="${llvm-j.jar}"/>
      <else>
        <exec executable="git">
          <arg value="submodule" />
          <arg value="update" />
        </exec>
        <exec executable="make" dir="llvm-j" failonerror="true">
          <arg value="llvm" />
          <arg value="LLVM_HOME=/usr/" />
          <arg value="LLVM_VERSION=3.5svn" />
        </exec>
        <mkdir dir="build/llvm-j/"/>
        <javac includeantruntime="false" srcdir="llvm-j/src/" 
               destdir="build/llvm-j/" classpathref="llvm-j.build.classpath" />
        <jar destfile="${llvm-j.jar}" basedir="build/llvm-j/" />
      </else>
    </if>
    <if>
      <available file="${sprintabout.jar}"/>
      <else>
        <exec executable="wget" dir="${dir.build}" failonerror="true">         
          <arg value="-N" />
          <arg value="http://www-igm.univ-mlv.fr/~forax/works/sprintabout/sprintabout-src.zip" />
        </exec>
        <exec executable="unzip" dir="${dir.build}" failonerror="true">
          <arg value="sprintabout-src.zip" />
        </exec>
        <exec executable="ant" dir="${dir.build}/sprintabout/" failonerror="true">
          <arg value="jar" />
          <arg value="-Dasm.lib.dir=lib/" />
        </exec>
        <copy todir="${dir.libs}">
          <file file="build/sprintabout/lib/sprintabout.jar" />
          <file file="build/sprintabout/lib/asm-3.0.jar" />
        </copy>
      </else>
    </if>
  </target>
  <target name="llvm_j_test" depends="build_libs">
    <java classname="org.junit.runner.JUnitCore" fork="true" classpathref="llvm-j.run.classpath">
      <arg value="org.llvm.test.TestJIT" />
      <arg value="org.llvm.test.TestLLVM" />
      <arg value="org.llvm.test.TestFactorial" />
    </java>
  </target>
  <target name="compile" depends="build_libs">
    <mkdir dir="${dir.classes}"/>
    <outofdate>
      <sourcefiles>
        <pathelement path="src/syntax/Mjc.jacc"/>
      </sourcefiles>
      <targetfiles>
        <pathelement path="src/syntax/MjcParser.java"/>
        <pathelement path="src/syntax/MjcTokens.java"/>
      </targetfiles>
      <sequential>
        <exec executable="jacc" failonerror="true">
          <arg value="src/syntax/Mjc.jacc" />
        </exec>
      </sequential>
    </outofdate>
    <javac debug="on" includeantruntime="false" srcdir="src" destdir="${dir.classes}" classpathref="project.classpath" />
  </target>
  <target name="jar" depends="compile,runtime">    
    <mkdir dir="build/jar"/>
    <manifestclasspath property="jar.classpath" jarfile="build/jar/mjc.jar">
      <classpath refid="project.classpath"/>
    </manifestclasspath>
    <jar destfile="build/jar/mjc.jar" basedir="${dir.classes}">
      <manifest>
        <attribute name="Main-Class" value="Compiler"/>
        <attribute name="Class-Path" value="${jar.classpath}"/>
      </manifest>
    </jar>
  </target>
  <target name="run" depends="jar">
    <java jar="build/jar/mjc.jar" fork="true"/>
  </target>
  <target name="test" depends="jar">
    <exec executable="./wrap" failonerror="true">
      <arg value="./runTests.py" />
      <arg value="show_diff" />
    </exec>
  </target>
</project>
